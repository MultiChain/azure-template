{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "0.0.0.1",
  "parameters": {
    "_artifactsLocation": {
      "type": "string",
      "metadata": {
        "description": "The base URI where artifacts required by this template are located."
      },
      "defaultValue": "[deployment().properties.templateLink.uri]"
    },
    "_artifactsLocationSasToken": {
      "type": "securestring",
      "defaultValue": ""
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Select the Azure region for the resources"
      }
    },
    "uid": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Provide a unique id to generate unique names for the resources. Otherwise old resources may be overwritten."
      },
      "minLength": 0,
      "maxLength": 16
    },
    "vmsize": {
      "type": "string",
      "defaultValue": "Standard_D2s_v3",
      "metadata": {
        "description": "Size of the vm that runs MultiChain."
      }
    },
    "os_user": {
      "type": "string",
      "defaultValue": "mcadmin",
      "metadata": {
        "description": "Admin Username of the vm."
      }
    },
    "cred_password": {
      "type": "securestring",
      "defaultValue": "",
      "metadata": {
        "description": "Password for the vm admin user."
      }
    },
    "cred_sshPublicKey": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "SSH-Key for the vm admin user."
      }
    },
    "cred_authenticationType": {
      "type": "string",
      "defaultValue": "password",
      "allowedValues": [
        "password",
        "sshPublicKey"
      ],
      "metadata": {
        "description": "Authentication to use for the vm admin user."
      }
    },
    "disksize": {
      "type": "string",
      "defaultValue": "128",
      "allowedValues": [
        "32",
        "64",
        "128",
        "256",
        "512",
        "1024",
        "2048",
        "4096",
        "8192",
        "16384",
        "32767"
      ],
      "metadata": {
        "description": "Size of the vm disk in GiB."
      }
    },
    "domainNameLabel": {
      "type": "string",
      "metadata": {
        "description": "Prefix label for the FQDN of the vm."
      }
    },
    "mode": {
      "type": "string",
      "defaultValue": "create",
      "metadata": {
        "description": "MultiChain deployment mode (create or join a network)."
      },
      "allowedValues": [
        "create",
        "join"
      ]
    },
    "rpcuser": {
      "type": "string",
      "defaultValue": "multichain",
      "metadata": {
        "description": "HTTP Basic authentication username for JSON-RPC API and web dashboard."
      }
    },
    "rpcpassword": {
      "type": "securestring",
      "defaultValue": "",
      "metadata": {
        "description": "HTTP Basic authentication password for JSON-RPC API and web dashboard."
      }
    },
    "chain_name": {
      "type": "string",
      "metadata": {
        "description": "Name of the chain to create or join."
      }
    },
    "chain_description": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Textual description of the blockchain."
      }
    },
    "seed_node": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Endpoint of the seed node to connect to. (<ip>:<port> or <hostname>:<port>)"
      }
    },
    "create_parameters": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Provide custom parameters for creation of a new chain."
      }
    },
    "runtime_flags": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Provide custom runtime flags for MultiChain daemon."
      }
    },
    "certtype": {
      "type": "string",
      "defaultValue": "letsencrypt",
      "metadata": {
        "description": "Provide the type of the certificate."
      },
      "allowedValues": [
        "disabled",
        "self",
        "letsencrypt"
      ]
    },
    "email": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Provide an email to be able to recover your letsencrypt certificate. Highly recommended when using letsencrypt!"
      }
    },
    "post_script": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "!ADVANCED USERS ONLY! Provide a base64 encoded bash script that is executed after base deployment is finished."
      }
    }
  },
  "variables": {
    "prefix": "[concat(parameters('chain_name'), '-', parameters('uid'), '-')]",
    "publicIpAddressName": "[concat(variables('prefix'), 'ip')]",
    "virtualNetworkName": "[concat(variables('prefix'), 'vnet')]",
    "networkInterfaceName": "[concat(variables('prefix'), 'nic')]",
    "networkSecurityGroupName": "[concat(variables('prefix'), 'nsg')]",
    "virtualMachineName": "[concat(variables('prefix'), 'vm')]",
    "subnetName": "default",
    "subnetId": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('virtualNetworkName'), variables('subnetName'))]",
    "nsgId": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('networkSecurityGroupName'))]",
    "nicId": "[resourceId('Microsoft.Network/networkInterfaces', variables('networkInterfaceName'))]",
    "configuration": {
      "os_user": "[parameters('os_user')]",
      "chain_name": "[parameters('chain_name')]",
      "chain_description": "[parameters('chain_description')]",
      "seed_node": "[parameters('seed_node')]",
      "runtime_flags": "[parameters('runtime_flags')]",
      "create_parameters": "[parameters('create_parameters')]",
      "email": "[parameters('email')]",
      "mode": "[parameters('mode')]",
      "rpcuser": "[parameters('rpcuser')]",
      "rpcpassword": "[parameters('rpcpassword')]",
      "certtype": "[parameters('certtype')]",
      "post_script": "[parameters('post_script')]"
    },
    "linuxConfiguration": {
      "disablePasswordAuthentication": true,
      "ssh": {
        "publicKeys": [
          {
            "path": "[concat('/home/', parameters('os_user'), '/.ssh/authorized_keys')]",
            "keyData": "[parameters('cred_sshPublicKey')]"
          }
        ]
      }
    }
  },
  "functions": [
  ],
  "resources": [
    {
      "apiVersion": "2019-05-01",
      "name": "pid-ce9fefd9-abeb-5a7a-8c18-b77bbc0b37a0",
      "type": "Microsoft.Resources/deployments",
      "properties": {
        "mode": "Incremental",
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "resources": [
          ]
        }
      }
    },
    {
      "type": "Microsoft.Network/publicIPAddresses",
      "apiVersion": "2019-04-01",
      "name": "[variables('publicIpAddressName')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Basic"
      },
      "properties": {
        "dnsSettings": {
          "domainNameLabel": "[parameters('domainNameLabel')]"
        },
        "publicIPAddressVersion": "IPv4",
        "idleTimeoutInMinutes": 10,
        "publicIPAllocationMethod": "Static"
      }
    },
    {
      "apiVersion": "2019-04-01",
      "type": "Microsoft.Network/networkSecurityGroups",
      "name": "[variables('networkSecurityGroupName')]",
      "location": "[parameters('location')]",
      "properties": {
        "securityRules": [
          {
            "name": "SSH",
            "properties": {
              "priority": 1000,
              "access": "Deny",
              "direction": "Inbound",
              "protocol": "Tcp",
              "sourceAddressPrefix": "*",
              "sourcePortRange": "*",
              "destinationAddressPrefix": "172.17.0.4",
              "destinationPortRange": "22"
            }
          },
          {
            "name": "P2P",
            "properties": {
              "priority": 1001,
              "access": "Allow",
              "direction": "Inbound",
              "protocol": "Tcp",
              "sourceAddressPrefix": "*",
              "sourcePortRange": "*",
              "destinationAddressPrefix": "172.17.0.4",
              "destinationPortRange": "7000"
            }
          },
          {
            "name": "MultiChain",
            "properties": {
              "priority": 1002,
              "description": "provides dashboard and rpc access",
              "access": "Allow",
              "direction": "Inbound",
              "protocol": "Tcp",
              "sourceAddressPrefix": "*",
              "sourcePortRange": "*",
              "destinationAddressPrefix": "172.17.0.4",
              "destinationPortRange": "[if(equals(parameters('certtype'), 'disabled'), '80', '443')]"
            }
          },
          {
            "name": "LetsEncrypt",
            "properties": {
              "priority": 1003,
              "description": "required by letsencrypt certbot",
              "access": "[if(equals(parameters('certtype'),'letsencrypt'), 'Allow', 'Deny')]",
              "direction": "Inbound",
              "protocol": "Tcp",
              "sourceAddressPrefix": "*",
              "sourcePortRange": "*",
              "destinationAddressPrefix": "172.17.0.4",
              "destinationPortRange": "80"
            }
          }
        ]
      }
    },
    {
      "apiVersion": "2019-04-01",
      "type": "Microsoft.Network/virtualNetworks",
      "name": "[variables('virtualNetworkName')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[concat('Microsoft.Network/networkSecurityGroups/', variables('networkSecurityGroupName'))]"
      ],
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "172.17.0.0/16"
          ]
        },
        "subnets": [
          {
            "name": "[variables('subnetName')]",
            "properties": {
              "addressPrefix": "172.17.0.0/24",
              "networkSecurityGroup": {
                "id": "[variables('nsgId')]"
              }
            }
          }
        ]
      }
    },
    {
      "apiVersion": "2019-04-01",
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[variables('networkInterfaceName')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[concat('Microsoft.Network/publicIpAddresses/', variables('publicIpAddressName'))]",
        "[concat('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'))]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig",
            "properties": {
              "privateIPAddressVersion": "IPv4",
              "privateIPAllocationMethod": "Static",
              "privateIPAddress": "172.17.0.4",
              "subnet": {
                "id": "[variables('subnetId')]"
              },
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIpAddresses', variables('publicIpAddressName'))]"
              }
            }
          }
        ]
      }
    },
    {
      "apiVersion": "2019-03-01",
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[variables('virtualMachineName')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[concat('Microsoft.Network/networkInterfaces/', variables('networkInterfaceName'))]"
      ],
      "properties": {
        "hardwareProfile": {
          "vmSize": "[parameters('vmsize')]"
        },
        "storageProfile": {
          "osDisk": {
            "caching": "ReadOnly",
            "createOption": "FromImage",
            "managedDisk": {
              "storageAccountType": "Premium_LRS"
            },
            "diskSizeGB": "[parameters('disksize')]"
          },
          "imageReference": {
            "publisher": "Canonical",
            "offer": "UbuntuServer",
            "sku": "18.04-LTS",
            "version": "latest"
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[variables('nicId')]"
            }
          ]
        },
        "osProfile": {
          "computerName": "[parameters('domainNameLabel')]",
          "adminUsername": "[parameters('os_user')]",
          "adminPassword": "[parameters('cred_password')]",
          "linuxConfiguration": "[if(equals(parameters('cred_authenticationType'), 'password'), json('null'), variables('linuxConfiguration'))]"
        }
      }
    },
    {
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "name": "[concat(variables('virtualMachineName'),'/installMultiChain')]",
      "apiVersion": "2019-03-01",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[concat('Microsoft.Compute/virtualMachines/', variables('virtualMachineName'))]"
      ],
      "properties": {
        "publisher": "Microsoft.Azure.Extensions",
        "type": "CustomScript",
        "typeHandlerVersion": "2.0",
        "autoUpgradeMinorVersion": true,
        "settings": {
          "fileUris": [
            "[uri(parameters('_artifactsLocation'),concat('scripts/init.sh', parameters('_artifactsLocationSasToken')))]",
            "[uri(parameters('_artifactsLocation'),concat('scripts/dashboard.php', parameters('_artifactsLocationSasToken')))]",
            "[uri(parameters('_artifactsLocation'),concat('scripts/multichain-2.0-latest.tar.gz', parameters('_artifactsLocationSasToken')))]"
          ],
          "commandToExecute": "[concat('./init.sh', ' ', base64(string(variables('configuration'))), ' ',reference(variables('publicIpAddressName')).ipAddress, ' ',reference(variables('publicIpAddressName')).dnsSettings.fqdn)]"
        }
      }
    }
  ],
  "outputs": {
    "dashboard": {
      "type": "string",
      "value": "[split(reference('/installMultiChain').instanceView.statuses[0].message, '#dashboard#')[1]]"
    },
    "rpc-endpoint": {
      "type": "string",
      "value": "[split(reference('/installMultiChain').instanceView.statuses[0].message, '#rpcaddr#')[1]]"
    },
    "p2p-endpoint": {
      "type": "string",
      "value": "[split(reference('/installMultiChain').instanceView.statuses[0].message, '#p2paddr#')[1]]"
    },
    "certificate": {
      "type": "string",
      "value": "[split(reference('/installMultiChain').instanceView.statuses[0].message, '#certificate#')[1]]"
    },
    "initial-multichain-address": {
      "type": "string",
      "value": "[split(reference('/installMultiChain').instanceView.statuses[0].message, '#initial_multichain_address#')[1]]"
    }
  }
}